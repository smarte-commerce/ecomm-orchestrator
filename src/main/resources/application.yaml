server:
  port: 8095
  error:
    include-message: never

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    instance-id: ${spring.application.name}:${random.value}

spring:
  application:
    name: ORCHESTRATOR-SERVICE
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping: event:com.winnguyen1905.orchestrator.model.event.SagaEvent
        spring.json.trusted.packages: com.winnguyen1905.*
    consumer:
      group-id: orchestrator-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.type.mapping: event:com.winnguyen1905.orchestrator.model.event.SagaEvent
        spring.json.trusted.packages: com.winnguyen1905.*
      order-group-id: order
      stock-group-id: stock
      payment-group-id: payment
      promotion-group-id: promotion

  # Redis Configuration for saga state
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:mypassword}
      timeout: 2000
      lettuce:
        pool:
          enabled: true
          max-active: 8
          max-idle: 4
          min-idle: 2
          max-wait: 5000ms
  
  # RabbitMQ for backward compatibility
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    virtual-host: /
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 1000
          max-attempts: 5
        acknowledge-mode: auto

  # Database for saga state persistence
  datasource:
    url: jdbc:postgresql://localhost:5432/orchestrator
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: false

# Microservices configuration
microservices:
  order-service:
    url: http://ORDER-SERVICE
  payment-service:
    url: http://PAYMENT-SERVICE
  product-service:
    url: http://PRODUCT-SERVICE
  shipping-service:
    url: http://SHIPPING-SERVICE
  promotion-service:
    url: http://PROMOTION-SERVICE

# Kafka Topics
topic:
  name:
    # Order topics
    order.created: create-order
    order.reject: reject-order
    order.approve: approve-order
    # Stock topics
    stock.in: reserve-product
    stock.reserved: product-reserved
    stock.cancel: product-cancel
    stock.update: product-update
    # Payment topics
    payment.in: process-payment
    payment.out: payment-processed
    payment.cancel: cancel-payment
    # Promotion topics
    promotion.in: validate-coupon
    promotion.out: coupon-validated
    promotion.cancel: cancel-coupon

# Kafka Topics (for backward compatibility with KafkaConfig.java)
kafka:
  topics:
    order-created: order-created-events
    product-reserved: product-reserved-events
    product-reservation-failed: product-reservation-failed-events
    payment-processed: payment-processed-events
    payment-failed: payment-failed-events
    order-approved: order-approved-events
    order-cancelled: order-cancelled-events
    coupon-applied: coupon-applied-events
    split-payment-processed: split-payment-processed-events

# Saga configuration
saga:
  timeout: 300000  # 5 minutes in milliseconds
  retry:
    max-attempts: 3
    backoff-initial: 1000
    backoff-multiplier: 2
    backoff-max: 10000

logging:
  level:
    com.winnguyen1905.orchestrator: DEBUG
    org.springframework.kafka: INFO
    org.springframework.data.redis: INFO
    org.springframework.transaction: INFO 
